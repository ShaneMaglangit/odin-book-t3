import {prisma} from '../server/db/client'
import {v4 as uuidv4} from 'uuid'
import {SessionUser} from '../types/session-user'
import User from '../types/user'

export function createSessionUser(): SessionUser {
    const id = uuidv4()
    return {
        id: `mockid-${id}`,
        name: 'Test User',
        image: 'https://example.com/image.png',
        email: `testuser-${id}@email.com`,
    }
}

export function sessionUserToUser(sessionUser: SessionUser, primaryFriendships: number, secondaryFriendships: number): User {
    return {
        id: sessionUser.id,
        name: sessionUser.name,
        image: sessionUser.image,
        email: sessionUser.email,
        _count: {primaryFriendships: primaryFriendships, secondaryFriendships: secondaryFriendships},
    }
}

// A mock write function is needed because manual creation of User objects is not supported by default.
// All User objects are generated by the respective OAuth providers.
export async function createMockUser(): Promise<SessionUser> {
    const user = createSessionUser()
    await prisma.user.create({
        data: {
            id: user.id,
            name: user.name,
            image: user.image,
            email: user.email,
        },
    })
    return user
}

export async function deleteMockUsers() {
    await prisma.user.deleteMany({where: {id: {startsWith: 'mockid-'}}})
}